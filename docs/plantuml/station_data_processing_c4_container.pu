@startuml
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Container.puml
!define SPRITESURL https://raw.githubusercontent.com/rabelenda/cicon-plantuml-sprites/v1.0/sprites
!includeurl SPRITESURL/kafka.puml
!includeurl SPRITESURL/java.puml
!includeurl SPRITESURL/postgresql.puml

skinparam TitleFontSize 30
LAYOUT_WITH_LEGEND()

title
<b>Station Data Processing</b>
(C4 Container diagram)
end title
  
System_Boundary(c1, "Station data processing") {
    Container(producerApplication, "Producer Application", "Java, Unirest, Kafka", "<$java>\n Fetch stations data from Paris' API and push them to Kafka")
    Container(streamingApplication, "Streaming Application", "Java, Kafka Streaming", "<$java>\n Combine and process Paris' data. Detect locked stations using their expected activity based on past statistics") 
    ContainerDb(statisticsDb, "Statistics Database", "PostgreSQL", "<$postgresql>\n Store the hourly usage statistics and daily traffic statistics of each station")
    ContainerDb(kafkaCluster, "Kafka Cluster", "Kafka, Schema Registry", "<$kafka>\n Store the incoming station and traffic data, and the processed station status and statistics")
    Container(sinkApplication, "SinkApplication", "Java, Kafka", "<$java>\n Consume statistics topic and store data in the statistics database") 
}

System_Ext(parisAPI, "Paris OpenData API", "Expose stations and counters data")

Rel(producerApplication, kafkaCluster, "Push the stations and traffic data")
Rel(streamingApplication, kafkaCluster, "Process the stations data to detect anomalies and the traffic data to compute each station nearby traffic")
Rel_Up(sinkApplication, kafkaCluster, "Consume statistics topics")
Rel_Up(sinkApplication, statisticsDb, "Write statistics data")
Rel(streamingApplication, statisticsDb, "Fetch the usage statistics to compute station's expected activity")
Rel_R(producerApplication, parisAPI, "Get the stations and traffic data", "REST")
@enduml