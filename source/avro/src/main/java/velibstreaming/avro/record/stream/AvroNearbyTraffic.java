/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package velibstreaming.avro.record.stream;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroNearbyTraffic extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8023782286365696253L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroNearbyTraffic\",\"namespace\":\"velibstreaming.avro.record.stream\",\"fields\":[{\"name\":\"stationCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"totalTraffic\",\"type\":\"int\",\"default\":0},{\"name\":\"periodStart\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"local-timestamp-millis\"},{\"name\":\"periodEnd\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"local-timestamp-millis\"},{\"name\":\"counts\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AvroBicycleCount\",\"namespace\":\"velibstreaming.avro.record.source\",\"fields\":[{\"name\":\"counterId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"count\",\"type\":\"int\"},{\"name\":\"countTimestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"record\",\"name\":\"AvroCoordinates\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroNearbyTraffic> ENCODER =
      new BinaryMessageEncoder<AvroNearbyTraffic>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroNearbyTraffic> DECODER =
      new BinaryMessageDecoder<AvroNearbyTraffic>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroNearbyTraffic> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroNearbyTraffic> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroNearbyTraffic> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroNearbyTraffic>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroNearbyTraffic to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroNearbyTraffic from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroNearbyTraffic instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroNearbyTraffic fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String stationCode;
  @Deprecated public int totalTraffic;
  @Deprecated public java.lang.Long periodStart;
  @Deprecated public java.lang.Long periodEnd;
  @Deprecated public java.util.List<velibstreaming.avro.record.source.AvroBicycleCount> counts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroNearbyTraffic() {}

  /**
   * All-args constructor.
   * @param stationCode The new value for stationCode
   * @param totalTraffic The new value for totalTraffic
   * @param periodStart The new value for periodStart
   * @param periodEnd The new value for periodEnd
   * @param counts The new value for counts
   */
  public AvroNearbyTraffic(java.lang.String stationCode, java.lang.Integer totalTraffic, java.lang.Long periodStart, java.lang.Long periodEnd, java.util.List<velibstreaming.avro.record.source.AvroBicycleCount> counts) {
    this.stationCode = stationCode;
    this.totalTraffic = totalTraffic;
    this.periodStart = periodStart;
    this.periodEnd = periodEnd;
    this.counts = counts;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stationCode;
    case 1: return totalTraffic;
    case 2: return periodStart;
    case 3: return periodEnd;
    case 4: return counts;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stationCode = value$ != null ? value$.toString() : null; break;
    case 1: totalTraffic = (java.lang.Integer)value$; break;
    case 2: periodStart = (java.lang.Long)value$; break;
    case 3: periodEnd = (java.lang.Long)value$; break;
    case 4: counts = (java.util.List<velibstreaming.avro.record.source.AvroBicycleCount>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'stationCode' field.
   * @return The value of the 'stationCode' field.
   */
  public java.lang.String getStationCode() {
    return stationCode;
  }


  /**
   * Sets the value of the 'stationCode' field.
   * @param value the value to set.
   */
  public void setStationCode(java.lang.String value) {
    this.stationCode = value;
  }

  /**
   * Gets the value of the 'totalTraffic' field.
   * @return The value of the 'totalTraffic' field.
   */
  public int getTotalTraffic() {
    return totalTraffic;
  }


  /**
   * Sets the value of the 'totalTraffic' field.
   * @param value the value to set.
   */
  public void setTotalTraffic(int value) {
    this.totalTraffic = value;
  }

  /**
   * Gets the value of the 'periodStart' field.
   * @return The value of the 'periodStart' field.
   */
  public java.lang.Long getPeriodStart() {
    return periodStart;
  }


  /**
   * Sets the value of the 'periodStart' field.
   * @param value the value to set.
   */
  public void setPeriodStart(java.lang.Long value) {
    this.periodStart = value;
  }

  /**
   * Gets the value of the 'periodEnd' field.
   * @return The value of the 'periodEnd' field.
   */
  public java.lang.Long getPeriodEnd() {
    return periodEnd;
  }


  /**
   * Sets the value of the 'periodEnd' field.
   * @param value the value to set.
   */
  public void setPeriodEnd(java.lang.Long value) {
    this.periodEnd = value;
  }

  /**
   * Gets the value of the 'counts' field.
   * @return The value of the 'counts' field.
   */
  public java.util.List<velibstreaming.avro.record.source.AvroBicycleCount> getCounts() {
    return counts;
  }


  /**
   * Sets the value of the 'counts' field.
   * @param value the value to set.
   */
  public void setCounts(java.util.List<velibstreaming.avro.record.source.AvroBicycleCount> value) {
    this.counts = value;
  }

  /**
   * Creates a new AvroNearbyTraffic RecordBuilder.
   * @return A new AvroNearbyTraffic RecordBuilder
   */
  public static velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder newBuilder() {
    return new velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder();
  }

  /**
   * Creates a new AvroNearbyTraffic RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroNearbyTraffic RecordBuilder
   */
  public static velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder newBuilder(velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder other) {
    if (other == null) {
      return new velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder();
    } else {
      return new velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder(other);
    }
  }

  /**
   * Creates a new AvroNearbyTraffic RecordBuilder by copying an existing AvroNearbyTraffic instance.
   * @param other The existing instance to copy.
   * @return A new AvroNearbyTraffic RecordBuilder
   */
  public static velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder newBuilder(velibstreaming.avro.record.stream.AvroNearbyTraffic other) {
    if (other == null) {
      return new velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder();
    } else {
      return new velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroNearbyTraffic instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroNearbyTraffic>
    implements org.apache.avro.data.RecordBuilder<AvroNearbyTraffic> {

    private java.lang.String stationCode;
    private int totalTraffic;
    private java.lang.Long periodStart;
    private java.lang.Long periodEnd;
    private java.util.List<velibstreaming.avro.record.source.AvroBicycleCount> counts;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stationCode)) {
        this.stationCode = data().deepCopy(fields()[0].schema(), other.stationCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.totalTraffic)) {
        this.totalTraffic = data().deepCopy(fields()[1].schema(), other.totalTraffic);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.periodStart)) {
        this.periodStart = data().deepCopy(fields()[2].schema(), other.periodStart);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.periodEnd)) {
        this.periodEnd = data().deepCopy(fields()[3].schema(), other.periodEnd);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.counts)) {
        this.counts = data().deepCopy(fields()[4].schema(), other.counts);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroNearbyTraffic instance
     * @param other The existing instance to copy.
     */
    private Builder(velibstreaming.avro.record.stream.AvroNearbyTraffic other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.stationCode)) {
        this.stationCode = data().deepCopy(fields()[0].schema(), other.stationCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.totalTraffic)) {
        this.totalTraffic = data().deepCopy(fields()[1].schema(), other.totalTraffic);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.periodStart)) {
        this.periodStart = data().deepCopy(fields()[2].schema(), other.periodStart);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.periodEnd)) {
        this.periodEnd = data().deepCopy(fields()[3].schema(), other.periodEnd);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.counts)) {
        this.counts = data().deepCopy(fields()[4].schema(), other.counts);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'stationCode' field.
      * @return The value.
      */
    public java.lang.String getStationCode() {
      return stationCode;
    }


    /**
      * Sets the value of the 'stationCode' field.
      * @param value The value of 'stationCode'.
      * @return This builder.
      */
    public velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder setStationCode(java.lang.String value) {
      validate(fields()[0], value);
      this.stationCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stationCode' field has been set.
      * @return True if the 'stationCode' field has been set, false otherwise.
      */
    public boolean hasStationCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stationCode' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder clearStationCode() {
      stationCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalTraffic' field.
      * @return The value.
      */
    public int getTotalTraffic() {
      return totalTraffic;
    }


    /**
      * Sets the value of the 'totalTraffic' field.
      * @param value The value of 'totalTraffic'.
      * @return This builder.
      */
    public velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder setTotalTraffic(int value) {
      validate(fields()[1], value);
      this.totalTraffic = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'totalTraffic' field has been set.
      * @return True if the 'totalTraffic' field has been set, false otherwise.
      */
    public boolean hasTotalTraffic() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'totalTraffic' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder clearTotalTraffic() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'periodStart' field.
      * @return The value.
      */
    public java.lang.Long getPeriodStart() {
      return periodStart;
    }


    /**
      * Sets the value of the 'periodStart' field.
      * @param value The value of 'periodStart'.
      * @return This builder.
      */
    public velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder setPeriodStart(java.lang.Long value) {
      validate(fields()[2], value);
      this.periodStart = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'periodStart' field has been set.
      * @return True if the 'periodStart' field has been set, false otherwise.
      */
    public boolean hasPeriodStart() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'periodStart' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder clearPeriodStart() {
      periodStart = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'periodEnd' field.
      * @return The value.
      */
    public java.lang.Long getPeriodEnd() {
      return periodEnd;
    }


    /**
      * Sets the value of the 'periodEnd' field.
      * @param value The value of 'periodEnd'.
      * @return This builder.
      */
    public velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder setPeriodEnd(java.lang.Long value) {
      validate(fields()[3], value);
      this.periodEnd = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'periodEnd' field has been set.
      * @return True if the 'periodEnd' field has been set, false otherwise.
      */
    public boolean hasPeriodEnd() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'periodEnd' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder clearPeriodEnd() {
      periodEnd = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'counts' field.
      * @return The value.
      */
    public java.util.List<velibstreaming.avro.record.source.AvroBicycleCount> getCounts() {
      return counts;
    }


    /**
      * Sets the value of the 'counts' field.
      * @param value The value of 'counts'.
      * @return This builder.
      */
    public velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder setCounts(java.util.List<velibstreaming.avro.record.source.AvroBicycleCount> value) {
      validate(fields()[4], value);
      this.counts = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'counts' field has been set.
      * @return True if the 'counts' field has been set, false otherwise.
      */
    public boolean hasCounts() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'counts' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.stream.AvroNearbyTraffic.Builder clearCounts() {
      counts = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroNearbyTraffic build() {
      try {
        AvroNearbyTraffic record = new AvroNearbyTraffic();
        record.stationCode = fieldSetFlags()[0] ? this.stationCode : (java.lang.String) defaultValue(fields()[0]);
        record.totalTraffic = fieldSetFlags()[1] ? this.totalTraffic : (java.lang.Integer) defaultValue(fields()[1]);
        record.periodStart = fieldSetFlags()[2] ? this.periodStart : (java.lang.Long) defaultValue(fields()[2]);
        record.periodEnd = fieldSetFlags()[3] ? this.periodEnd : (java.lang.Long) defaultValue(fields()[3]);
        record.counts = fieldSetFlags()[4] ? this.counts : (java.util.List<velibstreaming.avro.record.source.AvroBicycleCount>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroNearbyTraffic>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroNearbyTraffic>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroNearbyTraffic>
    READER$ = (org.apache.avro.io.DatumReader<AvroNearbyTraffic>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.stationCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.stationCode);
    }

    out.writeInt(this.totalTraffic);

    if (this.periodStart == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.periodStart);
    }

    if (this.periodEnd == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.periodEnd);
    }

    long size0 = this.counts.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (velibstreaming.avro.record.source.AvroBicycleCount e0: this.counts) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.stationCode = null;
      } else {
        this.stationCode = in.readString();
      }

      this.totalTraffic = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.periodStart = null;
      } else {
        this.periodStart = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.periodEnd = null;
      } else {
        this.periodEnd = in.readLong();
      }

      long size0 = in.readArrayStart();
      java.util.List<velibstreaming.avro.record.source.AvroBicycleCount> a0 = this.counts;
      if (a0 == null) {
        a0 = new SpecificData.Array<velibstreaming.avro.record.source.AvroBicycleCount>((int)size0, SCHEMA$.getField("counts").schema());
        this.counts = a0;
      } else a0.clear();
      SpecificData.Array<velibstreaming.avro.record.source.AvroBicycleCount> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<velibstreaming.avro.record.source.AvroBicycleCount>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          velibstreaming.avro.record.source.AvroBicycleCount e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new velibstreaming.avro.record.source.AvroBicycleCount();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.stationCode = null;
          } else {
            this.stationCode = in.readString();
          }
          break;

        case 1:
          this.totalTraffic = in.readInt();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.periodStart = null;
          } else {
            this.periodStart = in.readLong();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.periodEnd = null;
          } else {
            this.periodEnd = in.readLong();
          }
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<velibstreaming.avro.record.source.AvroBicycleCount> a0 = this.counts;
          if (a0 == null) {
            a0 = new SpecificData.Array<velibstreaming.avro.record.source.AvroBicycleCount>((int)size0, SCHEMA$.getField("counts").schema());
            this.counts = a0;
          } else a0.clear();
          SpecificData.Array<velibstreaming.avro.record.source.AvroBicycleCount> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<velibstreaming.avro.record.source.AvroBicycleCount>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              velibstreaming.avro.record.source.AvroBicycleCount e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new velibstreaming.avro.record.source.AvroBicycleCount();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










