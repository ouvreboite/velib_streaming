/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package velibstreaming.avro.record.source;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroRealTimeAvailability extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2855401560168595411L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroRealTimeAvailability\",\"namespace\":\"velibstreaming.avro.record.source\",\"fields\":[{\"name\":\"stationCode\",\"type\":\"string\"},{\"name\":\"mechanicalBikesAtStation\",\"type\":\"int\"},{\"name\":\"electricBikesAtStation\",\"type\":\"int\"},{\"name\":\"availabilityTimestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroRealTimeAvailability> ENCODER =
      new BinaryMessageEncoder<AvroRealTimeAvailability>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroRealTimeAvailability> DECODER =
      new BinaryMessageDecoder<AvroRealTimeAvailability>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroRealTimeAvailability> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroRealTimeAvailability> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroRealTimeAvailability> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroRealTimeAvailability>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroRealTimeAvailability to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroRealTimeAvailability from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroRealTimeAvailability instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroRealTimeAvailability fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence stationCode;
  @Deprecated public int mechanicalBikesAtStation;
  @Deprecated public int electricBikesAtStation;
  @Deprecated public long availabilityTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroRealTimeAvailability() {}

  /**
   * All-args constructor.
   * @param stationCode The new value for stationCode
   * @param mechanicalBikesAtStation The new value for mechanicalBikesAtStation
   * @param electricBikesAtStation The new value for electricBikesAtStation
   * @param availabilityTimestamp The new value for availabilityTimestamp
   */
  public AvroRealTimeAvailability(java.lang.CharSequence stationCode, java.lang.Integer mechanicalBikesAtStation, java.lang.Integer electricBikesAtStation, java.lang.Long availabilityTimestamp) {
    this.stationCode = stationCode;
    this.mechanicalBikesAtStation = mechanicalBikesAtStation;
    this.electricBikesAtStation = electricBikesAtStation;
    this.availabilityTimestamp = availabilityTimestamp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stationCode;
    case 1: return mechanicalBikesAtStation;
    case 2: return electricBikesAtStation;
    case 3: return availabilityTimestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stationCode = (java.lang.CharSequence)value$; break;
    case 1: mechanicalBikesAtStation = (java.lang.Integer)value$; break;
    case 2: electricBikesAtStation = (java.lang.Integer)value$; break;
    case 3: availabilityTimestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'stationCode' field.
   * @return The value of the 'stationCode' field.
   */
  public java.lang.CharSequence getStationCode() {
    return stationCode;
  }


  /**
   * Sets the value of the 'stationCode' field.
   * @param value the value to set.
   */
  public void setStationCode(java.lang.CharSequence value) {
    this.stationCode = value;
  }

  /**
   * Gets the value of the 'mechanicalBikesAtStation' field.
   * @return The value of the 'mechanicalBikesAtStation' field.
   */
  public int getMechanicalBikesAtStation() {
    return mechanicalBikesAtStation;
  }


  /**
   * Sets the value of the 'mechanicalBikesAtStation' field.
   * @param value the value to set.
   */
  public void setMechanicalBikesAtStation(int value) {
    this.mechanicalBikesAtStation = value;
  }

  /**
   * Gets the value of the 'electricBikesAtStation' field.
   * @return The value of the 'electricBikesAtStation' field.
   */
  public int getElectricBikesAtStation() {
    return electricBikesAtStation;
  }


  /**
   * Sets the value of the 'electricBikesAtStation' field.
   * @param value the value to set.
   */
  public void setElectricBikesAtStation(int value) {
    this.electricBikesAtStation = value;
  }

  /**
   * Gets the value of the 'availabilityTimestamp' field.
   * @return The value of the 'availabilityTimestamp' field.
   */
  public long getAvailabilityTimestamp() {
    return availabilityTimestamp;
  }


  /**
   * Sets the value of the 'availabilityTimestamp' field.
   * @param value the value to set.
   */
  public void setAvailabilityTimestamp(long value) {
    this.availabilityTimestamp = value;
  }

  /**
   * Creates a new AvroRealTimeAvailability RecordBuilder.
   * @return A new AvroRealTimeAvailability RecordBuilder
   */
  public static velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder newBuilder() {
    return new velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder();
  }

  /**
   * Creates a new AvroRealTimeAvailability RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroRealTimeAvailability RecordBuilder
   */
  public static velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder newBuilder(velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder other) {
    if (other == null) {
      return new velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder();
    } else {
      return new velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder(other);
    }
  }

  /**
   * Creates a new AvroRealTimeAvailability RecordBuilder by copying an existing AvroRealTimeAvailability instance.
   * @param other The existing instance to copy.
   * @return A new AvroRealTimeAvailability RecordBuilder
   */
  public static velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder newBuilder(velibstreaming.avro.record.source.AvroRealTimeAvailability other) {
    if (other == null) {
      return new velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder();
    } else {
      return new velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroRealTimeAvailability instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroRealTimeAvailability>
    implements org.apache.avro.data.RecordBuilder<AvroRealTimeAvailability> {

    private java.lang.CharSequence stationCode;
    private int mechanicalBikesAtStation;
    private int electricBikesAtStation;
    private long availabilityTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stationCode)) {
        this.stationCode = data().deepCopy(fields()[0].schema(), other.stationCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mechanicalBikesAtStation)) {
        this.mechanicalBikesAtStation = data().deepCopy(fields()[1].schema(), other.mechanicalBikesAtStation);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.electricBikesAtStation)) {
        this.electricBikesAtStation = data().deepCopy(fields()[2].schema(), other.electricBikesAtStation);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.availabilityTimestamp)) {
        this.availabilityTimestamp = data().deepCopy(fields()[3].schema(), other.availabilityTimestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroRealTimeAvailability instance
     * @param other The existing instance to copy.
     */
    private Builder(velibstreaming.avro.record.source.AvroRealTimeAvailability other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.stationCode)) {
        this.stationCode = data().deepCopy(fields()[0].schema(), other.stationCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mechanicalBikesAtStation)) {
        this.mechanicalBikesAtStation = data().deepCopy(fields()[1].schema(), other.mechanicalBikesAtStation);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.electricBikesAtStation)) {
        this.electricBikesAtStation = data().deepCopy(fields()[2].schema(), other.electricBikesAtStation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.availabilityTimestamp)) {
        this.availabilityTimestamp = data().deepCopy(fields()[3].schema(), other.availabilityTimestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'stationCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getStationCode() {
      return stationCode;
    }


    /**
      * Sets the value of the 'stationCode' field.
      * @param value The value of 'stationCode'.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder setStationCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.stationCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stationCode' field has been set.
      * @return True if the 'stationCode' field has been set, false otherwise.
      */
    public boolean hasStationCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stationCode' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder clearStationCode() {
      stationCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mechanicalBikesAtStation' field.
      * @return The value.
      */
    public int getMechanicalBikesAtStation() {
      return mechanicalBikesAtStation;
    }


    /**
      * Sets the value of the 'mechanicalBikesAtStation' field.
      * @param value The value of 'mechanicalBikesAtStation'.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder setMechanicalBikesAtStation(int value) {
      validate(fields()[1], value);
      this.mechanicalBikesAtStation = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mechanicalBikesAtStation' field has been set.
      * @return True if the 'mechanicalBikesAtStation' field has been set, false otherwise.
      */
    public boolean hasMechanicalBikesAtStation() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mechanicalBikesAtStation' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder clearMechanicalBikesAtStation() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'electricBikesAtStation' field.
      * @return The value.
      */
    public int getElectricBikesAtStation() {
      return electricBikesAtStation;
    }


    /**
      * Sets the value of the 'electricBikesAtStation' field.
      * @param value The value of 'electricBikesAtStation'.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder setElectricBikesAtStation(int value) {
      validate(fields()[2], value);
      this.electricBikesAtStation = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'electricBikesAtStation' field has been set.
      * @return True if the 'electricBikesAtStation' field has been set, false otherwise.
      */
    public boolean hasElectricBikesAtStation() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'electricBikesAtStation' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder clearElectricBikesAtStation() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'availabilityTimestamp' field.
      * @return The value.
      */
    public long getAvailabilityTimestamp() {
      return availabilityTimestamp;
    }


    /**
      * Sets the value of the 'availabilityTimestamp' field.
      * @param value The value of 'availabilityTimestamp'.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder setAvailabilityTimestamp(long value) {
      validate(fields()[3], value);
      this.availabilityTimestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'availabilityTimestamp' field has been set.
      * @return True if the 'availabilityTimestamp' field has been set, false otherwise.
      */
    public boolean hasAvailabilityTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'availabilityTimestamp' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroRealTimeAvailability.Builder clearAvailabilityTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroRealTimeAvailability build() {
      try {
        AvroRealTimeAvailability record = new AvroRealTimeAvailability();
        record.stationCode = fieldSetFlags()[0] ? this.stationCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.mechanicalBikesAtStation = fieldSetFlags()[1] ? this.mechanicalBikesAtStation : (java.lang.Integer) defaultValue(fields()[1]);
        record.electricBikesAtStation = fieldSetFlags()[2] ? this.electricBikesAtStation : (java.lang.Integer) defaultValue(fields()[2]);
        record.availabilityTimestamp = fieldSetFlags()[3] ? this.availabilityTimestamp : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroRealTimeAvailability>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroRealTimeAvailability>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroRealTimeAvailability>
    READER$ = (org.apache.avro.io.DatumReader<AvroRealTimeAvailability>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.stationCode);

    out.writeInt(this.mechanicalBikesAtStation);

    out.writeInt(this.electricBikesAtStation);

    out.writeLong(this.availabilityTimestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.stationCode = in.readString(this.stationCode instanceof Utf8 ? (Utf8)this.stationCode : null);

      this.mechanicalBikesAtStation = in.readInt();

      this.electricBikesAtStation = in.readInt();

      this.availabilityTimestamp = in.readLong();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.stationCode = in.readString(this.stationCode instanceof Utf8 ? (Utf8)this.stationCode : null);
          break;

        case 1:
          this.mechanicalBikesAtStation = in.readInt();
          break;

        case 2:
          this.electricBikesAtStation = in.readInt();
          break;

        case 3:
          this.availabilityTimestamp = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










