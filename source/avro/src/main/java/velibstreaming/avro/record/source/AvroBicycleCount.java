/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package velibstreaming.avro.record.source;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroBicycleCount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9208930857661880400L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroBicycleCount\",\"namespace\":\"velibstreaming.avro.record.source\",\"fields\":[{\"name\":\"counterId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"count\",\"type\":\"int\"},{\"name\":\"countTimestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"record\",\"name\":\"AvroCoordinates\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroBicycleCount> ENCODER =
      new BinaryMessageEncoder<AvroBicycleCount>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroBicycleCount> DECODER =
      new BinaryMessageDecoder<AvroBicycleCount>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroBicycleCount> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroBicycleCount> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroBicycleCount> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroBicycleCount>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroBicycleCount to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroBicycleCount from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroBicycleCount instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroBicycleCount fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String counterId;
  @Deprecated public int count;
  @Deprecated public long countTimestamp;
  @Deprecated public velibstreaming.avro.record.source.AvroCoordinates coordinates;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroBicycleCount() {}

  /**
   * All-args constructor.
   * @param counterId The new value for counterId
   * @param count The new value for count
   * @param countTimestamp The new value for countTimestamp
   * @param coordinates The new value for coordinates
   */
  public AvroBicycleCount(java.lang.String counterId, java.lang.Integer count, java.lang.Long countTimestamp, velibstreaming.avro.record.source.AvroCoordinates coordinates) {
    this.counterId = counterId;
    this.count = count;
    this.countTimestamp = countTimestamp;
    this.coordinates = coordinates;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return counterId;
    case 1: return count;
    case 2: return countTimestamp;
    case 3: return coordinates;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: counterId = value$ != null ? value$.toString() : null; break;
    case 1: count = (java.lang.Integer)value$; break;
    case 2: countTimestamp = (java.lang.Long)value$; break;
    case 3: coordinates = (velibstreaming.avro.record.source.AvroCoordinates)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'counterId' field.
   * @return The value of the 'counterId' field.
   */
  public java.lang.String getCounterId() {
    return counterId;
  }


  /**
   * Sets the value of the 'counterId' field.
   * @param value the value to set.
   */
  public void setCounterId(java.lang.String value) {
    this.counterId = value;
  }

  /**
   * Gets the value of the 'count' field.
   * @return The value of the 'count' field.
   */
  public int getCount() {
    return count;
  }


  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(int value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'countTimestamp' field.
   * @return The value of the 'countTimestamp' field.
   */
  public long getCountTimestamp() {
    return countTimestamp;
  }


  /**
   * Sets the value of the 'countTimestamp' field.
   * @param value the value to set.
   */
  public void setCountTimestamp(long value) {
    this.countTimestamp = value;
  }

  /**
   * Gets the value of the 'coordinates' field.
   * @return The value of the 'coordinates' field.
   */
  public velibstreaming.avro.record.source.AvroCoordinates getCoordinates() {
    return coordinates;
  }


  /**
   * Sets the value of the 'coordinates' field.
   * @param value the value to set.
   */
  public void setCoordinates(velibstreaming.avro.record.source.AvroCoordinates value) {
    this.coordinates = value;
  }

  /**
   * Creates a new AvroBicycleCount RecordBuilder.
   * @return A new AvroBicycleCount RecordBuilder
   */
  public static velibstreaming.avro.record.source.AvroBicycleCount.Builder newBuilder() {
    return new velibstreaming.avro.record.source.AvroBicycleCount.Builder();
  }

  /**
   * Creates a new AvroBicycleCount RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroBicycleCount RecordBuilder
   */
  public static velibstreaming.avro.record.source.AvroBicycleCount.Builder newBuilder(velibstreaming.avro.record.source.AvroBicycleCount.Builder other) {
    if (other == null) {
      return new velibstreaming.avro.record.source.AvroBicycleCount.Builder();
    } else {
      return new velibstreaming.avro.record.source.AvroBicycleCount.Builder(other);
    }
  }

  /**
   * Creates a new AvroBicycleCount RecordBuilder by copying an existing AvroBicycleCount instance.
   * @param other The existing instance to copy.
   * @return A new AvroBicycleCount RecordBuilder
   */
  public static velibstreaming.avro.record.source.AvroBicycleCount.Builder newBuilder(velibstreaming.avro.record.source.AvroBicycleCount other) {
    if (other == null) {
      return new velibstreaming.avro.record.source.AvroBicycleCount.Builder();
    } else {
      return new velibstreaming.avro.record.source.AvroBicycleCount.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroBicycleCount instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroBicycleCount>
    implements org.apache.avro.data.RecordBuilder<AvroBicycleCount> {

    private java.lang.String counterId;
    private int count;
    private long countTimestamp;
    private velibstreaming.avro.record.source.AvroCoordinates coordinates;
    private velibstreaming.avro.record.source.AvroCoordinates.Builder coordinatesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(velibstreaming.avro.record.source.AvroBicycleCount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.counterId)) {
        this.counterId = data().deepCopy(fields()[0].schema(), other.counterId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.count)) {
        this.count = data().deepCopy(fields()[1].schema(), other.count);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.countTimestamp)) {
        this.countTimestamp = data().deepCopy(fields()[2].schema(), other.countTimestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.coordinates)) {
        this.coordinates = data().deepCopy(fields()[3].schema(), other.coordinates);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasCoordinatesBuilder()) {
        this.coordinatesBuilder = velibstreaming.avro.record.source.AvroCoordinates.newBuilder(other.getCoordinatesBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing AvroBicycleCount instance
     * @param other The existing instance to copy.
     */
    private Builder(velibstreaming.avro.record.source.AvroBicycleCount other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.counterId)) {
        this.counterId = data().deepCopy(fields()[0].schema(), other.counterId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.count)) {
        this.count = data().deepCopy(fields()[1].schema(), other.count);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.countTimestamp)) {
        this.countTimestamp = data().deepCopy(fields()[2].schema(), other.countTimestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.coordinates)) {
        this.coordinates = data().deepCopy(fields()[3].schema(), other.coordinates);
        fieldSetFlags()[3] = true;
      }
      this.coordinatesBuilder = null;
    }

    /**
      * Gets the value of the 'counterId' field.
      * @return The value.
      */
    public java.lang.String getCounterId() {
      return counterId;
    }


    /**
      * Sets the value of the 'counterId' field.
      * @param value The value of 'counterId'.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroBicycleCount.Builder setCounterId(java.lang.String value) {
      validate(fields()[0], value);
      this.counterId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'counterId' field has been set.
      * @return True if the 'counterId' field has been set, false otherwise.
      */
    public boolean hasCounterId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'counterId' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroBicycleCount.Builder clearCounterId() {
      counterId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * @return The value.
      */
    public int getCount() {
      return count;
    }


    /**
      * Sets the value of the 'count' field.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroBicycleCount.Builder setCount(int value) {
      validate(fields()[1], value);
      this.count = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'count' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroBicycleCount.Builder clearCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'countTimestamp' field.
      * @return The value.
      */
    public long getCountTimestamp() {
      return countTimestamp;
    }


    /**
      * Sets the value of the 'countTimestamp' field.
      * @param value The value of 'countTimestamp'.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroBicycleCount.Builder setCountTimestamp(long value) {
      validate(fields()[2], value);
      this.countTimestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'countTimestamp' field has been set.
      * @return True if the 'countTimestamp' field has been set, false otherwise.
      */
    public boolean hasCountTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'countTimestamp' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroBicycleCount.Builder clearCountTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'coordinates' field.
      * @return The value.
      */
    public velibstreaming.avro.record.source.AvroCoordinates getCoordinates() {
      return coordinates;
    }


    /**
      * Sets the value of the 'coordinates' field.
      * @param value The value of 'coordinates'.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroBicycleCount.Builder setCoordinates(velibstreaming.avro.record.source.AvroCoordinates value) {
      validate(fields()[3], value);
      this.coordinatesBuilder = null;
      this.coordinates = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'coordinates' field has been set.
      * @return True if the 'coordinates' field has been set, false otherwise.
      */
    public boolean hasCoordinates() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'coordinates' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public velibstreaming.avro.record.source.AvroCoordinates.Builder getCoordinatesBuilder() {
      if (coordinatesBuilder == null) {
        if (hasCoordinates()) {
          setCoordinatesBuilder(velibstreaming.avro.record.source.AvroCoordinates.newBuilder(coordinates));
        } else {
          setCoordinatesBuilder(velibstreaming.avro.record.source.AvroCoordinates.newBuilder());
        }
      }
      return coordinatesBuilder;
    }

    /**
     * Sets the Builder instance for the 'coordinates' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public velibstreaming.avro.record.source.AvroBicycleCount.Builder setCoordinatesBuilder(velibstreaming.avro.record.source.AvroCoordinates.Builder value) {
      clearCoordinates();
      coordinatesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'coordinates' field has an active Builder instance
     * @return True if the 'coordinates' field has an active Builder instance
     */
    public boolean hasCoordinatesBuilder() {
      return coordinatesBuilder != null;
    }

    /**
      * Clears the value of the 'coordinates' field.
      * @return This builder.
      */
    public velibstreaming.avro.record.source.AvroBicycleCount.Builder clearCoordinates() {
      coordinates = null;
      coordinatesBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroBicycleCount build() {
      try {
        AvroBicycleCount record = new AvroBicycleCount();
        record.counterId = fieldSetFlags()[0] ? this.counterId : (java.lang.String) defaultValue(fields()[0]);
        record.count = fieldSetFlags()[1] ? this.count : (java.lang.Integer) defaultValue(fields()[1]);
        record.countTimestamp = fieldSetFlags()[2] ? this.countTimestamp : (java.lang.Long) defaultValue(fields()[2]);
        if (coordinatesBuilder != null) {
          try {
            record.coordinates = this.coordinatesBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("coordinates"));
            throw e;
          }
        } else {
          record.coordinates = fieldSetFlags()[3] ? this.coordinates : (velibstreaming.avro.record.source.AvroCoordinates) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroBicycleCount>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroBicycleCount>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroBicycleCount>
    READER$ = (org.apache.avro.io.DatumReader<AvroBicycleCount>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.counterId);

    out.writeInt(this.count);

    out.writeLong(this.countTimestamp);

    this.coordinates.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.counterId = in.readString();

      this.count = in.readInt();

      this.countTimestamp = in.readLong();

      if (this.coordinates == null) {
        this.coordinates = new velibstreaming.avro.record.source.AvroCoordinates();
      }
      this.coordinates.customDecode(in);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.counterId = in.readString();
          break;

        case 1:
          this.count = in.readInt();
          break;

        case 2:
          this.countTimestamp = in.readLong();
          break;

        case 3:
          if (this.coordinates == null) {
            this.coordinates = new velibstreaming.avro.record.source.AvroCoordinates();
          }
          this.coordinates.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










