/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fr.velinfo.avro.record.stream;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroBikesLocked extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8788236806010686597L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroBikesLocked\",\"namespace\":\"fr.velinfo.avro.record.stream\",\"fields\":[{\"name\":\"stationCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mechanicalBikesLocked\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"electricBikesLocked\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"emptySlotsLocked\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"periodStart\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"local-timestamp-millis\"},{\"name\":\"periodEnd\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"local-timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroBikesLocked> ENCODER =
      new BinaryMessageEncoder<AvroBikesLocked>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroBikesLocked> DECODER =
      new BinaryMessageDecoder<AvroBikesLocked>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroBikesLocked> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroBikesLocked> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroBikesLocked> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroBikesLocked>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroBikesLocked to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroBikesLocked from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroBikesLocked instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroBikesLocked fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String stationCode;
  @Deprecated public java.lang.Integer mechanicalBikesLocked;
  @Deprecated public java.lang.Integer electricBikesLocked;
  @Deprecated public java.lang.Integer emptySlotsLocked;
  @Deprecated public java.lang.Long periodStart;
  @Deprecated public java.lang.Long periodEnd;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroBikesLocked() {}

  /**
   * All-args constructor.
   * @param stationCode The new value for stationCode
   * @param mechanicalBikesLocked The new value for mechanicalBikesLocked
   * @param electricBikesLocked The new value for electricBikesLocked
   * @param emptySlotsLocked The new value for emptySlotsLocked
   * @param periodStart The new value for periodStart
   * @param periodEnd The new value for periodEnd
   */
  public AvroBikesLocked(java.lang.String stationCode, java.lang.Integer mechanicalBikesLocked, java.lang.Integer electricBikesLocked, java.lang.Integer emptySlotsLocked, java.lang.Long periodStart, java.lang.Long periodEnd) {
    this.stationCode = stationCode;
    this.mechanicalBikesLocked = mechanicalBikesLocked;
    this.electricBikesLocked = electricBikesLocked;
    this.emptySlotsLocked = emptySlotsLocked;
    this.periodStart = periodStart;
    this.periodEnd = periodEnd;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stationCode;
    case 1: return mechanicalBikesLocked;
    case 2: return electricBikesLocked;
    case 3: return emptySlotsLocked;
    case 4: return periodStart;
    case 5: return periodEnd;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stationCode = value$ != null ? value$.toString() : null; break;
    case 1: mechanicalBikesLocked = (java.lang.Integer)value$; break;
    case 2: electricBikesLocked = (java.lang.Integer)value$; break;
    case 3: emptySlotsLocked = (java.lang.Integer)value$; break;
    case 4: periodStart = (java.lang.Long)value$; break;
    case 5: periodEnd = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'stationCode' field.
   * @return The value of the 'stationCode' field.
   */
  public java.lang.String getStationCode() {
    return stationCode;
  }


  /**
   * Sets the value of the 'stationCode' field.
   * @param value the value to set.
   */
  public void setStationCode(java.lang.String value) {
    this.stationCode = value;
  }

  /**
   * Gets the value of the 'mechanicalBikesLocked' field.
   * @return The value of the 'mechanicalBikesLocked' field.
   */
  public java.lang.Integer getMechanicalBikesLocked() {
    return mechanicalBikesLocked;
  }


  /**
   * Sets the value of the 'mechanicalBikesLocked' field.
   * @param value the value to set.
   */
  public void setMechanicalBikesLocked(java.lang.Integer value) {
    this.mechanicalBikesLocked = value;
  }

  /**
   * Gets the value of the 'electricBikesLocked' field.
   * @return The value of the 'electricBikesLocked' field.
   */
  public java.lang.Integer getElectricBikesLocked() {
    return electricBikesLocked;
  }


  /**
   * Sets the value of the 'electricBikesLocked' field.
   * @param value the value to set.
   */
  public void setElectricBikesLocked(java.lang.Integer value) {
    this.electricBikesLocked = value;
  }

  /**
   * Gets the value of the 'emptySlotsLocked' field.
   * @return The value of the 'emptySlotsLocked' field.
   */
  public java.lang.Integer getEmptySlotsLocked() {
    return emptySlotsLocked;
  }


  /**
   * Sets the value of the 'emptySlotsLocked' field.
   * @param value the value to set.
   */
  public void setEmptySlotsLocked(java.lang.Integer value) {
    this.emptySlotsLocked = value;
  }

  /**
   * Gets the value of the 'periodStart' field.
   * @return The value of the 'periodStart' field.
   */
  public java.lang.Long getPeriodStart() {
    return periodStart;
  }


  /**
   * Sets the value of the 'periodStart' field.
   * @param value the value to set.
   */
  public void setPeriodStart(java.lang.Long value) {
    this.periodStart = value;
  }

  /**
   * Gets the value of the 'periodEnd' field.
   * @return The value of the 'periodEnd' field.
   */
  public java.lang.Long getPeriodEnd() {
    return periodEnd;
  }


  /**
   * Sets the value of the 'periodEnd' field.
   * @param value the value to set.
   */
  public void setPeriodEnd(java.lang.Long value) {
    this.periodEnd = value;
  }

  /**
   * Creates a new AvroBikesLocked RecordBuilder.
   * @return A new AvroBikesLocked RecordBuilder
   */
  public static fr.velinfo.avro.record.stream.AvroBikesLocked.Builder newBuilder() {
    return new fr.velinfo.avro.record.stream.AvroBikesLocked.Builder();
  }

  /**
   * Creates a new AvroBikesLocked RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroBikesLocked RecordBuilder
   */
  public static fr.velinfo.avro.record.stream.AvroBikesLocked.Builder newBuilder(fr.velinfo.avro.record.stream.AvroBikesLocked.Builder other) {
    if (other == null) {
      return new fr.velinfo.avro.record.stream.AvroBikesLocked.Builder();
    } else {
      return new fr.velinfo.avro.record.stream.AvroBikesLocked.Builder(other);
    }
  }

  /**
   * Creates a new AvroBikesLocked RecordBuilder by copying an existing AvroBikesLocked instance.
   * @param other The existing instance to copy.
   * @return A new AvroBikesLocked RecordBuilder
   */
  public static fr.velinfo.avro.record.stream.AvroBikesLocked.Builder newBuilder(fr.velinfo.avro.record.stream.AvroBikesLocked other) {
    if (other == null) {
      return new fr.velinfo.avro.record.stream.AvroBikesLocked.Builder();
    } else {
      return new fr.velinfo.avro.record.stream.AvroBikesLocked.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroBikesLocked instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroBikesLocked>
    implements org.apache.avro.data.RecordBuilder<AvroBikesLocked> {

    private java.lang.String stationCode;
    private java.lang.Integer mechanicalBikesLocked;
    private java.lang.Integer electricBikesLocked;
    private java.lang.Integer emptySlotsLocked;
    private java.lang.Long periodStart;
    private java.lang.Long periodEnd;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(fr.velinfo.avro.record.stream.AvroBikesLocked.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stationCode)) {
        this.stationCode = data().deepCopy(fields()[0].schema(), other.stationCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.mechanicalBikesLocked)) {
        this.mechanicalBikesLocked = data().deepCopy(fields()[1].schema(), other.mechanicalBikesLocked);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.electricBikesLocked)) {
        this.electricBikesLocked = data().deepCopy(fields()[2].schema(), other.electricBikesLocked);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.emptySlotsLocked)) {
        this.emptySlotsLocked = data().deepCopy(fields()[3].schema(), other.emptySlotsLocked);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.periodStart)) {
        this.periodStart = data().deepCopy(fields()[4].schema(), other.periodStart);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.periodEnd)) {
        this.periodEnd = data().deepCopy(fields()[5].schema(), other.periodEnd);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroBikesLocked instance
     * @param other The existing instance to copy.
     */
    private Builder(fr.velinfo.avro.record.stream.AvroBikesLocked other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.stationCode)) {
        this.stationCode = data().deepCopy(fields()[0].schema(), other.stationCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mechanicalBikesLocked)) {
        this.mechanicalBikesLocked = data().deepCopy(fields()[1].schema(), other.mechanicalBikesLocked);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.electricBikesLocked)) {
        this.electricBikesLocked = data().deepCopy(fields()[2].schema(), other.electricBikesLocked);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.emptySlotsLocked)) {
        this.emptySlotsLocked = data().deepCopy(fields()[3].schema(), other.emptySlotsLocked);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.periodStart)) {
        this.periodStart = data().deepCopy(fields()[4].schema(), other.periodStart);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.periodEnd)) {
        this.periodEnd = data().deepCopy(fields()[5].schema(), other.periodEnd);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'stationCode' field.
      * @return The value.
      */
    public java.lang.String getStationCode() {
      return stationCode;
    }


    /**
      * Sets the value of the 'stationCode' field.
      * @param value The value of 'stationCode'.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroBikesLocked.Builder setStationCode(java.lang.String value) {
      validate(fields()[0], value);
      this.stationCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stationCode' field has been set.
      * @return True if the 'stationCode' field has been set, false otherwise.
      */
    public boolean hasStationCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stationCode' field.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroBikesLocked.Builder clearStationCode() {
      stationCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mechanicalBikesLocked' field.
      * @return The value.
      */
    public java.lang.Integer getMechanicalBikesLocked() {
      return mechanicalBikesLocked;
    }


    /**
      * Sets the value of the 'mechanicalBikesLocked' field.
      * @param value The value of 'mechanicalBikesLocked'.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroBikesLocked.Builder setMechanicalBikesLocked(java.lang.Integer value) {
      validate(fields()[1], value);
      this.mechanicalBikesLocked = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mechanicalBikesLocked' field has been set.
      * @return True if the 'mechanicalBikesLocked' field has been set, false otherwise.
      */
    public boolean hasMechanicalBikesLocked() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mechanicalBikesLocked' field.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroBikesLocked.Builder clearMechanicalBikesLocked() {
      mechanicalBikesLocked = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'electricBikesLocked' field.
      * @return The value.
      */
    public java.lang.Integer getElectricBikesLocked() {
      return electricBikesLocked;
    }


    /**
      * Sets the value of the 'electricBikesLocked' field.
      * @param value The value of 'electricBikesLocked'.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroBikesLocked.Builder setElectricBikesLocked(java.lang.Integer value) {
      validate(fields()[2], value);
      this.electricBikesLocked = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'electricBikesLocked' field has been set.
      * @return True if the 'electricBikesLocked' field has been set, false otherwise.
      */
    public boolean hasElectricBikesLocked() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'electricBikesLocked' field.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroBikesLocked.Builder clearElectricBikesLocked() {
      electricBikesLocked = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'emptySlotsLocked' field.
      * @return The value.
      */
    public java.lang.Integer getEmptySlotsLocked() {
      return emptySlotsLocked;
    }


    /**
      * Sets the value of the 'emptySlotsLocked' field.
      * @param value The value of 'emptySlotsLocked'.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroBikesLocked.Builder setEmptySlotsLocked(java.lang.Integer value) {
      validate(fields()[3], value);
      this.emptySlotsLocked = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'emptySlotsLocked' field has been set.
      * @return True if the 'emptySlotsLocked' field has been set, false otherwise.
      */
    public boolean hasEmptySlotsLocked() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'emptySlotsLocked' field.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroBikesLocked.Builder clearEmptySlotsLocked() {
      emptySlotsLocked = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'periodStart' field.
      * @return The value.
      */
    public java.lang.Long getPeriodStart() {
      return periodStart;
    }


    /**
      * Sets the value of the 'periodStart' field.
      * @param value The value of 'periodStart'.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroBikesLocked.Builder setPeriodStart(java.lang.Long value) {
      validate(fields()[4], value);
      this.periodStart = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'periodStart' field has been set.
      * @return True if the 'periodStart' field has been set, false otherwise.
      */
    public boolean hasPeriodStart() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'periodStart' field.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroBikesLocked.Builder clearPeriodStart() {
      periodStart = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'periodEnd' field.
      * @return The value.
      */
    public java.lang.Long getPeriodEnd() {
      return periodEnd;
    }


    /**
      * Sets the value of the 'periodEnd' field.
      * @param value The value of 'periodEnd'.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroBikesLocked.Builder setPeriodEnd(java.lang.Long value) {
      validate(fields()[5], value);
      this.periodEnd = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'periodEnd' field has been set.
      * @return True if the 'periodEnd' field has been set, false otherwise.
      */
    public boolean hasPeriodEnd() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'periodEnd' field.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroBikesLocked.Builder clearPeriodEnd() {
      periodEnd = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroBikesLocked build() {
      try {
        AvroBikesLocked record = new AvroBikesLocked();
        record.stationCode = fieldSetFlags()[0] ? this.stationCode : (java.lang.String) defaultValue(fields()[0]);
        record.mechanicalBikesLocked = fieldSetFlags()[1] ? this.mechanicalBikesLocked : (java.lang.Integer) defaultValue(fields()[1]);
        record.electricBikesLocked = fieldSetFlags()[2] ? this.electricBikesLocked : (java.lang.Integer) defaultValue(fields()[2]);
        record.emptySlotsLocked = fieldSetFlags()[3] ? this.emptySlotsLocked : (java.lang.Integer) defaultValue(fields()[3]);
        record.periodStart = fieldSetFlags()[4] ? this.periodStart : (java.lang.Long) defaultValue(fields()[4]);
        record.periodEnd = fieldSetFlags()[5] ? this.periodEnd : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroBikesLocked>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroBikesLocked>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroBikesLocked>
    READER$ = (org.apache.avro.io.DatumReader<AvroBikesLocked>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.stationCode);

    if (this.mechanicalBikesLocked == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.mechanicalBikesLocked);
    }

    if (this.electricBikesLocked == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.electricBikesLocked);
    }

    if (this.emptySlotsLocked == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.emptySlotsLocked);
    }

    if (this.periodStart == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.periodStart);
    }

    if (this.periodEnd == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.periodEnd);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.stationCode = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.mechanicalBikesLocked = null;
      } else {
        this.mechanicalBikesLocked = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.electricBikesLocked = null;
      } else {
        this.electricBikesLocked = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.emptySlotsLocked = null;
      } else {
        this.emptySlotsLocked = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.periodStart = null;
      } else {
        this.periodStart = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.periodEnd = null;
      } else {
        this.periodEnd = in.readLong();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.stationCode = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mechanicalBikesLocked = null;
          } else {
            this.mechanicalBikesLocked = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.electricBikesLocked = null;
          } else {
            this.electricBikesLocked = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.emptySlotsLocked = null;
          } else {
            this.emptySlotsLocked = in.readInt();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.periodStart = null;
          } else {
            this.periodStart = in.readLong();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.periodEnd = null;
          } else {
            this.periodEnd = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










