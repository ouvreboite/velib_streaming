/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fr.velinfo.avro.record.stream;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroStationsAffectedByCount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2665123723609147110L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroStationsAffectedByCount\",\"namespace\":\"fr.velinfo.avro.record.stream\",\"fields\":[{\"name\":\"stationCodes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"default\":[]},{\"name\":\"count\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AvroBicycleCount\",\"namespace\":\"fr.velinfo.avro.record.source\",\"fields\":[{\"name\":\"counterId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"count\",\"type\":\"int\"},{\"name\":\"countTimestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"record\",\"name\":\"AvroCoordinates\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroStationsAffectedByCount> ENCODER =
      new BinaryMessageEncoder<AvroStationsAffectedByCount>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroStationsAffectedByCount> DECODER =
      new BinaryMessageDecoder<AvroStationsAffectedByCount>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroStationsAffectedByCount> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroStationsAffectedByCount> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroStationsAffectedByCount> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroStationsAffectedByCount>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroStationsAffectedByCount to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroStationsAffectedByCount from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroStationsAffectedByCount instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroStationsAffectedByCount fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<java.lang.String> stationCodes;
  @Deprecated public fr.velinfo.avro.record.source.AvroBicycleCount count;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroStationsAffectedByCount() {}

  /**
   * All-args constructor.
   * @param stationCodes The new value for stationCodes
   * @param count The new value for count
   */
  public AvroStationsAffectedByCount(java.util.List<java.lang.String> stationCodes, fr.velinfo.avro.record.source.AvroBicycleCount count) {
    this.stationCodes = stationCodes;
    this.count = count;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stationCodes;
    case 1: return count;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stationCodes = (java.util.List<java.lang.String>)value$; break;
    case 1: count = (fr.velinfo.avro.record.source.AvroBicycleCount)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'stationCodes' field.
   * @return The value of the 'stationCodes' field.
   */
  public java.util.List<java.lang.String> getStationCodes() {
    return stationCodes;
  }


  /**
   * Sets the value of the 'stationCodes' field.
   * @param value the value to set.
   */
  public void setStationCodes(java.util.List<java.lang.String> value) {
    this.stationCodes = value;
  }

  /**
   * Gets the value of the 'count' field.
   * @return The value of the 'count' field.
   */
  public fr.velinfo.avro.record.source.AvroBicycleCount getCount() {
    return count;
  }


  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(fr.velinfo.avro.record.source.AvroBicycleCount value) {
    this.count = value;
  }

  /**
   * Creates a new AvroStationsAffectedByCount RecordBuilder.
   * @return A new AvroStationsAffectedByCount RecordBuilder
   */
  public static fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder newBuilder() {
    return new fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder();
  }

  /**
   * Creates a new AvroStationsAffectedByCount RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroStationsAffectedByCount RecordBuilder
   */
  public static fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder newBuilder(fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder other) {
    if (other == null) {
      return new fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder();
    } else {
      return new fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder(other);
    }
  }

  /**
   * Creates a new AvroStationsAffectedByCount RecordBuilder by copying an existing AvroStationsAffectedByCount instance.
   * @param other The existing instance to copy.
   * @return A new AvroStationsAffectedByCount RecordBuilder
   */
  public static fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder newBuilder(fr.velinfo.avro.record.stream.AvroStationsAffectedByCount other) {
    if (other == null) {
      return new fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder();
    } else {
      return new fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroStationsAffectedByCount instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroStationsAffectedByCount>
    implements org.apache.avro.data.RecordBuilder<AvroStationsAffectedByCount> {

    private java.util.List<java.lang.String> stationCodes;
    private fr.velinfo.avro.record.source.AvroBicycleCount count;
    private fr.velinfo.avro.record.source.AvroBicycleCount.Builder countBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stationCodes)) {
        this.stationCodes = data().deepCopy(fields()[0].schema(), other.stationCodes);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.count)) {
        this.count = data().deepCopy(fields()[1].schema(), other.count);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasCountBuilder()) {
        this.countBuilder = fr.velinfo.avro.record.source.AvroBicycleCount.newBuilder(other.getCountBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing AvroStationsAffectedByCount instance
     * @param other The existing instance to copy.
     */
    private Builder(fr.velinfo.avro.record.stream.AvroStationsAffectedByCount other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.stationCodes)) {
        this.stationCodes = data().deepCopy(fields()[0].schema(), other.stationCodes);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.count)) {
        this.count = data().deepCopy(fields()[1].schema(), other.count);
        fieldSetFlags()[1] = true;
      }
      this.countBuilder = null;
    }

    /**
      * Gets the value of the 'stationCodes' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getStationCodes() {
      return stationCodes;
    }


    /**
      * Sets the value of the 'stationCodes' field.
      * @param value The value of 'stationCodes'.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder setStationCodes(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.stationCodes = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stationCodes' field has been set.
      * @return True if the 'stationCodes' field has been set, false otherwise.
      */
    public boolean hasStationCodes() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stationCodes' field.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder clearStationCodes() {
      stationCodes = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * @return The value.
      */
    public fr.velinfo.avro.record.source.AvroBicycleCount getCount() {
      return count;
    }


    /**
      * Sets the value of the 'count' field.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder setCount(fr.velinfo.avro.record.source.AvroBicycleCount value) {
      validate(fields()[1], value);
      this.countBuilder = null;
      this.count = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'count' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public fr.velinfo.avro.record.source.AvroBicycleCount.Builder getCountBuilder() {
      if (countBuilder == null) {
        if (hasCount()) {
          setCountBuilder(fr.velinfo.avro.record.source.AvroBicycleCount.newBuilder(count));
        } else {
          setCountBuilder(fr.velinfo.avro.record.source.AvroBicycleCount.newBuilder());
        }
      }
      return countBuilder;
    }

    /**
     * Sets the Builder instance for the 'count' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder setCountBuilder(fr.velinfo.avro.record.source.AvroBicycleCount.Builder value) {
      clearCount();
      countBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'count' field has an active Builder instance
     * @return True if the 'count' field has an active Builder instance
     */
    public boolean hasCountBuilder() {
      return countBuilder != null;
    }

    /**
      * Clears the value of the 'count' field.
      * @return This builder.
      */
    public fr.velinfo.avro.record.stream.AvroStationsAffectedByCount.Builder clearCount() {
      count = null;
      countBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroStationsAffectedByCount build() {
      try {
        AvroStationsAffectedByCount record = new AvroStationsAffectedByCount();
        record.stationCodes = fieldSetFlags()[0] ? this.stationCodes : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        if (countBuilder != null) {
          try {
            record.count = this.countBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("count"));
            throw e;
          }
        } else {
          record.count = fieldSetFlags()[1] ? this.count : (fr.velinfo.avro.record.source.AvroBicycleCount) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroStationsAffectedByCount>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroStationsAffectedByCount>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroStationsAffectedByCount>
    READER$ = (org.apache.avro.io.DatumReader<AvroStationsAffectedByCount>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.stationCodes.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.stationCodes) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.count == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.count.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.stationCodes;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("stationCodes").schema());
        this.stationCodes = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.count = null;
      } else {
        if (this.count == null) {
          this.count = new fr.velinfo.avro.record.source.AvroBicycleCount();
        }
        this.count.customDecode(in);
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.stationCodes;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("stationCodes").schema());
            this.stationCodes = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.count = null;
          } else {
            if (this.count == null) {
              this.count = new fr.velinfo.avro.record.source.AvroBicycleCount();
            }
            this.count.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










